
name: 'Merge commit'

on:
#  pull_request:
#    types:
#      - closed
#    branches:
#      - main
#      - master
#      - develop
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
env:
  is_release: ${{ (github.base_ref == 'main' || github.base_ref == 'master') && (github.head_ref == 'develop') }}
  is_hotfix: ${{ (github.base_ref == 'main' || github.base_ref == 'master') && (startsWith(github.head_ref , 'hotfix')) }}
  is_snapshot: ${{ (github.base_ref == 'develop') && (startsWith(github.head_ref , 'feature') || startsWith(github.head_ref , 'bugfix')) }}

jobs:

  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      ms-group: ${{ steps.get-group.outputs.MS_GROUP }}
      ms-name: ${{ steps.get-name.outputs.MS_NAME }}
      ms-version: ${{ steps.get-version.outputs.MS_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Show vars
        run: |
          echo "is_release: ${{env.is_release}}"
          echo "is_hotfix: ${{env.is_hotfix}}"
          echo "is_snapshot: ${{env.is_snapshot}}"
          echo "base_ref: ${{github.base_ref}}"
          echo "head_ref: ${{github.head_ref}}"

      - name: Generate release version
        id: generate-release
        if: env.is_release  == 'true'
        uses: ./.github/actions/increase-version
        with:
          group: minor
          release: true

      - name: Generate patch version
        id: generate-hotfix
        if: env.is_hotfix == 'true'
        uses: ./.github/actions/increase-version
        with:
          group: patch
          release: true

      - name: Commit new version
        if: ${{ steps.generate-release.outcome == 'success' || steps.generate-hotfix.outcome == 'success' }}
        run: |
          echo "Commit new version"

      - name: Get group
        id: get-group
        working-directory: code
        run: |
          MS_GROUP=$(grep "group" gradle.properties | cut -d'=' -f2)

          echo "MS_GROUP=$MS_GROUP" >> $GITHUB_OUTPUT

      - name: Get name
        id: get-name
        working-directory: code
        run: |
          MS_NAME=$(grep "name" gradle.properties | cut -d'=' -f2)
          
          echo "MS_NAME=$MS_NAME" >> $GITHUB_OUTPUT

      - name: Get version
        id: get-version
        working-directory: code
        run: |
          MS_VERSION=$(grep "version" gradle.properties | cut -d'=' -f2)
          
          echo "MS_VERSION=$MS_VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: [prepare]
    runs-on: ubuntu-latest
    env:
      MS_GROUP: ${{ needs.prepare.outputs.ms-group }}
      MS_NAME: ${{ needs.prepare.outputs.ms-name }}
      MS_VERSION: ${{ needs.prepare.outputs.ms-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install asdf
        uses: ./.github/actions/asdf-install

      - name: Build
        working-directory: code
        run: gradle build -x test
        env:
          # disable default JVM in container
          JAVA_HOME: ""

      - name: Upload compiled output in artifact
        uses: actions/upload-artifact@v4
        with:
          name: ms-build
          path: code/build/

  publish-jar:
    name: Publish Jar
    needs: [prepare, build]
    runs-on: ubuntu-latest
    env:
      MS_GROUP: ${{ needs.prepare.outputs.ms-group }}
      MS_NAME: ${{ needs.prepare.outputs.ms-name }}
      MS_VERSION: ${{ needs.prepare.outputs.ms-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install asdf
        uses: ./.github/actions/asdf-install

      - name: Download compiled output from artifact
        uses: actions/download-artifact@v4
        with:
          name: ms-build
          path: code/build/

      - name: Deploy Jar
        working-directory: code
        run: |
          # Update step to deploy jar in the artifactory of the company
          echo "Deploy Jar ($MS_GROUP.$MS_NAME-$MS_VERSION)"

  publish-docker:
    name: Publish Docker
    needs: [prepare, build]
    runs-on: ubuntu-latest
    env:
      MS_GROUP: ${{ needs.prepare.outputs.ms-group }}
      MS_NAME: ${{ needs.prepare.outputs.ms-name }}
      MS_VERSION: ${{ needs.prepare.outputs.ms-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download compiled output from artifact
        uses: actions/download-artifact@v4
        with:
          name: ms-build
          path: code/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build the Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.github/Dockerfile
          push: false
          tags: ${{env.MS_GROUP}}/${{env.MS_NAME}}:${{env.MS_VERSION}}

      - name: Deploy docker image
        run: |
          # Update step to deploy docker image
          echo "Deploy docker image ($MS_GROUP/$MS_NAME:$MS_VERSION)"

  deploy:
    name: Deploy
    needs: [prepare, publish-docker]
    runs-on: ubuntu-latest
    env:
      MS_GROUP: ${{ needs.prepare.outputs.ms-group }}
      MS_NAME: ${{ needs.prepare.outputs.ms-name }}
      MS_VERSION: ${{ needs.prepare.outputs.ms-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Execute docker image
        run: |
          # Update step to execute docker image in infra
          echo "Execute docker image in infra ($MS_GROUP/$MS_NAME:$MS_VERSION)"
